#!/usr/bin/env python3
"""
Script para analizar el archivo Excel del Libro IVA
Extrae informaci√≥n sobre ventas de repuestos (RE), maquinarias (MN) y servicios (SE)
"""

import pandas as pd
import numpy as np
from datetime import datetime
import re

def analizar_libro_iva(archivo_excel):
    """Analiza el archivo Excel del Libro IVA"""
    
    print("=" * 80)
    print("AN√ÅLISIS DEL LIBRO IVA - JULIO 2025")
    print("=" * 80)
    
    try:
        # Leer el archivo Excel
        df = pd.read_excel(archivo_excel)
        
        print(f"\nüìä INFORMACI√ìN GENERAL:")
        print(f"   ‚Ä¢ Filas totales: {len(df)}")
        print(f"   ‚Ä¢ Columnas: {list(df.columns)}")
        print(f"   ‚Ä¢ Tama√±o del archivo: {df.shape}")
        
        # Mostrar las primeras filas para entender la estructura
        print(f"\nüìã PRIMERAS 10 FILAS:")
        print(df.head(10).to_string())
        
        # Buscar columnas que contengan informaci√≥n relevante
        columnas_relevantes = []
        for col in df.columns:
            if any(palabra in str(col).upper() for palabra in ['FECHA', 'TIPO', 'COMPROBANTE', 'CLIENTE', 'MONTO', 'IVA', 'NETO', 'TOTAL']):
                columnas_relevantes.append(col)
        
        print(f"\nüéØ COLUMNAS RELEVANTES ENCONTRADAS:")
        for col in columnas_relevantes:
            print(f"   ‚Ä¢ {col}")
        
        # Buscar patrones de c√≥digos (RE, MN, SE)
        print(f"\nüîç BUSCANDO PATRONES DE C√ìDIGOS (RE, MN, SE):")
        
        # Buscar en todas las columnas de texto
        for col in df.columns:
            if df[col].dtype == 'object':  # Columnas de texto
                valores_unicos = df[col].dropna().unique()
                for valor in valores_unicos:
                    if isinstance(valor, str):
                        # Buscar patrones RE, MN, SE
                        if re.search(r'\b(RE|MN|SE)\b', valor.upper()):
                            print(f"   ‚Ä¢ Columna '{col}': {valor}")
        
        # Analizar tipos de comprobantes
        print(f"\nüìÑ TIPOS DE COMPROBANTES:")
        if 'TIPO' in df.columns:
            tipos = df['TIPO'].value_counts()
            print(tipos.to_string())
        elif 'COMPROBANTE' in df.columns:
            tipos = df['COMPROBANTE'].value_counts()
            print(tipos.to_string())
        
        # Analizar montos y totales
        print(f"\nüí∞ AN√ÅLISIS DE MONTOS:")
        columnas_monetarias = []
        for col in df.columns:
            if any(palabra in str(col).upper() for palabra in ['MONTO', 'TOTAL', 'NETO', 'IVA', 'PRECIO']):
                columnas_monetarias.append(col)
        
        for col in columnas_monetarias:
            if df[col].dtype in ['int64', 'float64']:
                print(f"   ‚Ä¢ {col}:")
                print(f"     - Total: ${df[col].sum():,.2f}")
                print(f"     - Promedio: ${df[col].mean():,.2f}")
                print(f"     - M√°ximo: ${df[col].max():,.2f}")
                print(f"     - M√≠nimo: ${df[col].min():,.2f}")
        
        # Buscar informaci√≥n espec√≠fica por categor√≠as
        print(f"\nüè∑Ô∏è AN√ÅLISIS POR CATEGOR√çAS:")
        
        # Buscar repuestos (RE)
        print(f"\nüîß REPUESTOS (RE):")
        for col in df.columns:
            if df[col].dtype == 'object':
                repuestos = df[df[col].astype(str).str.contains('RE', case=False, na=False)]
                if len(repuestos) > 0:
                    print(f"   ‚Ä¢ Encontrados {len(repuestos)} registros de repuestos en columna '{col}'")
                    print(f"   ‚Ä¢ Valores √∫nicos: {repuestos[col].unique()[:5]}")  # Primeros 5
        
        # Buscar maquinarias (MN)
        print(f"\nüöú MAQUINARIAS (MN):")
        for col in df.columns:
            if df[col].dtype == 'object':
                maquinarias = df[df[col].astype(str).str.contains('MN', case=False, na=False)]
                if len(maquinarias) > 0:
                    print(f"   ‚Ä¢ Encontrados {len(maquinarias)} registros de maquinarias en columna '{col}'")
                    print(f"   ‚Ä¢ Valores √∫nicos: {maquinarias[col].unique()[:5]}")  # Primeros 5
        
        # Buscar servicios (SE)
        print(f"\nüîß SERVICIOS (SE):")
        for col in df.columns:
            if df[col].dtype == 'object':
                servicios = df[df[col].astype(str).str.contains('SE', case=False, na=False)]
                if len(servicios) > 0:
                    print(f"   ‚Ä¢ Encontrados {len(servicios)} registros de servicios en columna '{col}'")
                    print(f"   ‚Ä¢ Valores √∫nicos: {servicios[col].unique()[:5]}")  # Primeros 5
        
        # Mostrar estad√≠sticas generales
        print(f"\nüìà ESTAD√çSTICAS GENERALES:")
        print(f"   ‚Ä¢ Registros con datos completos: {df.dropna().shape[0]}")
        print(f"   ‚Ä¢ Registros con datos faltantes: {df.shape[0] - df.dropna().shape[0]}")
        
        # Guardar informaci√≥n para importaci√≥n
        print(f"\nüíæ INFORMACI√ìN PARA IMPORTACI√ìN:")
        print(f"   ‚Ä¢ Estructura de columnas identificada")
        print(f"   ‚Ä¢ Patrones de c√≥digos encontrados")
        print(f"   ‚Ä¢ Tipos de datos detectados")
        
        return df
        
    except Exception as e:
        print(f"‚ùå Error al analizar el archivo: {e}")
        return None

def sugerir_importacion(df):
    """Sugiere c√≥mo importar los datos a la aplicaci√≥n"""
    
    print(f"\n" + "=" * 80)
    print("SUGERENCIAS PARA IMPORTACI√ìN")
    print("=" * 80)
    
    if df is None:
        print("‚ùå No se puede sugerir importaci√≥n sin datos v√°lidos")
        return
    
    print(f"\nüéØ ESTRATEGIA DE IMPORTACI√ìN:")
    print(f"   1. Crear modelo 'LibroIva' para almacenar registros mensuales")
    print(f"   2. Implementar funci√≥n de importaci√≥n desde Excel")
    print(f"   3. Categorizar autom√°ticamente por c√≥digos (RE/MN/SE)")
    print(f"   4. Vincular con clientes existentes")
    print(f"   5. Generar reportes de ventas por categor√≠a")
    
    print(f"\nüìä DATOS QUE SE PUEDEN EXTRAER:")
    print(f"   ‚Ä¢ Ventas de Repuestos (RE): Cantidad, montos, clientes")
    print(f"   ‚Ä¢ Ventas de Maquinarias (MN): Equipos, valores, clientes")
    print(f"   ‚Ä¢ Ventas de Servicios (SE): Tipos de servicio, horas, clientes")
    print(f"   ‚Ä¢ An√°lisis de rentabilidad por categor√≠a")
    print(f"   ‚Ä¢ Tendencias mensuales de ventas")
    
    print(f"\nüîß FUNCIONALIDADES SUGERIDAS:")
    print(f"   ‚Ä¢ Dashboard de ventas por categor√≠a")
    print(f"   ‚Ä¢ Reportes de rentabilidad")
    print(f"   ‚Ä¢ An√°lisis de clientes m√°s frecuentes")
    print(f"   ‚Ä¢ Comparativas mensuales")
    print(f"   ‚Ä¢ Exportaci√≥n de datos procesados")

if __name__ == "__main__":
    # Analizar el archivo
    df = analizar_libro_iva("LIBRO IVA 07-2025.xlsx")
    
    # Sugerir estrategia de importaci√≥n
    sugerir_importacion(df) 